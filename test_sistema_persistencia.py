"""
Script de prueba del nuevo sistema con persistencia de datos
"""

import os
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent))

from src.database.data_manager import data_manager
from src.background_service import background_service
from datetime import datetime

def probar_persistencia():
    """Prueba la funcionalidad de persistencia de datos"""
    print("=" * 60)
    print("   PRUEBA DEL SISTEMA DE PERSISTENCIA")
    print("=" * 60)
    print()
    
    # 1. Probar base de datos
    print("1Ô∏è‚É£ **PROBANDO BASE DE DATOS**")
    try:
        # Simular datos de scraping
        datos_test = [
            {
                'visitante': 'SD',
                'local': 'MIA', 
                'fecha': '2025-01-21',
                'hora': '6:40 pm ET',
                'over_percentage': '17%',
                'under_percentage': '83%',
                'total': '8.5',
                'expertos': '6'
            },
            {
                'visitante': 'CIN',
                'local': 'WAS',
                'fecha': '2025-01-21', 
                'hora': '6:45 pm ET',
                'over_percentage': '83%',
                'under_percentage': '17%',
                'total': '9.0',
                'expertos': '6'
            }
        ]
        
        # Guardar sesi√≥n de prueba
        session_id = data_manager.guardar_sesion_scraping(
            datos=datos_test,
            filtros={'test': True},
            duracion=45.5,
            errores=[]
        )
        
        print(f"   ‚úÖ Sesi√≥n guardada con ID: {session_id}")
        
        # Recuperar sesi√≥n del d√≠a
        sesion_hoy = data_manager.obtener_sesion_del_dia()
        if sesion_hoy:
            print(f"   ‚úÖ Sesi√≥n recuperada: {sesion_hoy.total_partidos} partidos")
        else:
            print("   ‚ö†Ô∏è No se encontr√≥ sesi√≥n del d√≠a")
            
    except Exception as e:
        print(f"   ‚ùå Error en base de datos: {e}")
        return False
    
    print()
    
    # 2. Probar programaci√≥n de scrapers
    print("2Ô∏è‚É£ **PROBANDO SCRAPERS PROGRAMADOS**")
    try:
        # Programar scrapers de prueba
        for dato in datos_test:
            scraper_id = data_manager.programar_scraper(dato)
            print(f"   ‚úÖ Scraper programado: {scraper_id}")
        
        # Obtener scrapers programados
        scrapers = data_manager.obtener_scrapers_programados()
        print(f"   üìä Total scrapers programados: {len(scrapers)}")
        
        for scraper in scrapers[:2]:  # Mostrar solo los primeros 2
            print(f"      ‚Ä¢ {scraper.visitante} @ {scraper.local} - {scraper.estado}")
            
    except Exception as e:
        print(f"   ‚ùå Error en scrapers: {e}")
        return False
    
    print()
    
    # 3. Probar estad√≠sticas
    print("3Ô∏è‚É£ **PROBANDO ESTAD√çSTICAS**")
    try:
        stats = data_manager.obtener_estadisticas_hoy()
        print(f"   üìä Sesiones hoy: {stats['sesiones_scraping']['total']}")
        print(f"   ü§ñ Scrapers programados: {stats['scrapers_automaticos']['total_programados']}")
        print(f"   ‚è±Ô∏è Duraci√≥n promedio: {stats['sesiones_scraping']['duracion_promedio']}s")
        
    except Exception as e:
        print(f"   ‚ùå Error en estad√≠sticas: {e}")
        return False
    
    print()
    print("‚úÖ **TODAS LAS PRUEBAS DE PERSISTENCIA EXITOSAS**")
    return True

def probar_servicio_background():
    """Prueba el servicio de background"""
    print("=" * 60)
    print("   PRUEBA DEL SERVICIO DE BACKGROUND")
    print("=" * 60)
    print()
    
    try:
        # Obtener estado del servicio
        status = background_service.get_status()
        
        print("1Ô∏è‚É£ **ESTADO ACTUAL**")
        print(f"   Servicio activo: {status['servicio_activo']}")
        print(f"   Telegram configurado: {status['telegram_configurado']}")
        print(f"   Scrapers pendientes: {status['scrapers_pendientes']}")
        print()
        
        print("2Ô∏è‚É£ **ESTAD√çSTICAS**")
        stats = status['estadisticas']
        print(f"   Scrapers ejecutados hoy: {stats['scrapers_ejecutados_hoy']}")
        print(f"   Errores hoy: {stats['errores_hoy']}")
        print(f"   √öltima ejecuci√≥n: {stats['ultima_ejecucion'] or 'Ninguna'}")
        print(f"   Servicio iniciado: {stats['servicio_iniciado_en']}")
        print()
        
        if not status['servicio_activo']:
            print("3Ô∏è‚É£ **INICIANDO SERVICIO**")
            # background_service.start_service()  # Comentado para no iniciar autom√°ticamente
            print("   ‚ÑπÔ∏è Servicio no iniciado (comentado para pruebas)")
        else:
            print("3Ô∏è‚É£ **SERVICIO YA ACTIVO**")
        
        print()
        print("‚úÖ **PRUEBA DE SERVICIO COMPLETADA**")
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando servicio: {e}")
        return False

def mostrar_instrucciones():
    """Muestra instrucciones para continuar"""
    print("=" * 60)
    print("   PR√ìXIMOS PASOS RECOMENDADOS")
    print("=" * 60)
    print()
    
    print("üöÄ **PARA USAR EL NUEVO SISTEMA:**")
    print()
    print("1Ô∏è‚É£ **Ejecutar la aplicaci√≥n web:**")
    print("   ‚Ä¢ Ejecuta: abrir_web.bat")
    print("   ‚Ä¢ Los datos se cargar√°n autom√°ticamente si existen")
    print("   ‚Ä¢ Los scrapers se guardan en la base de datos")
    print()
    
    print("2Ô∏è‚É£ **Iniciar el servicio autom√°tico:**")
    print("   ‚Ä¢ Desde la web: Se mostrar√° bot√≥n si no est√° activo")
    print("   ‚Ä¢ O ejecuta: python -c \"from src.background_service import background_service; background_service.start_service()\"")
    print()
    
    print("3Ô∏è‚É£ **Configurar Telegram (opcional):**")
    print("   ‚Ä¢ Configura las variables de entorno para Telegram")
    print("   ‚Ä¢ El sistema funcionar√° sin Telegram, pero no enviar√° alertas")
    print()
    
    print("4Ô∏è‚É£ **Monitorear el sistema:**")
    print("   ‚Ä¢ La web muestra el estado en tiempo real")
    print("   ‚Ä¢ Los datos persisten entre sesiones") 
    print("   ‚Ä¢ Los scrapers se ejecutan autom√°ticamente")
    print()
    
    print("üéØ **VENTAJAS DEL NUEVO SISTEMA:**")
    print("   ‚úÖ Los datos no se pierden al cerrar la aplicaci√≥n")
    print("   ‚úÖ Los scrapers se ejecutan autom√°ticamente")
    print("   ‚úÖ Historial completo de sesiones")
    print("   ‚úÖ Estad√≠sticas y reportes autom√°ticos")
    print("   ‚úÖ Alertas por Telegram (opcional)")
    print("   ‚úÖ Sistema puede correr 24/7")
    print()

def main():
    """Funci√≥n principal de pruebas"""
    print("üß™ INICIANDO PRUEBAS DEL SISTEMA MEJORADO")
    print()
    
    # Prueba 1: Persistencia
    if not probar_persistencia():
        print("‚ùå Fall√≥ la prueba de persistencia")
        return
    
    print()
    
    # Prueba 2: Servicio de background
    if not probar_servicio_background():
        print("‚ùå Fall√≥ la prueba del servicio")
        return
    
    print()
    
    # Mostrar instrucciones
    mostrar_instrucciones()
    
    print("üéâ **TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE**")
    print("üöÄ **EL SISTEMA EST√Å LISTO PARA USO EN PRODUCCI√ìN**")

if __name__ == "__main__":
    main()
