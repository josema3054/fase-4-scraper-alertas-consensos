"""
CONFIGURADOR DE FILTROS DIN√ÅMICOS
================================
Script para configurar filtros variables por hora del d√≠a
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

from src.scraper.sistema_scraper_robusto import ScraperRobusto, ConfiguracionFiltros
import json

def configurar_filtros_dinamicos():
    """Configurar filtros que var√≠an seg√∫n la hora del d√≠a"""
    
    print("‚öôÔ∏è CONFIGURADOR DE FILTROS DIN√ÅMICOS")
    print("=" * 50)
    
    # Inicializar sistema
    sistema = ScraperRobusto()
    
    print("\nüìã Configuraci√≥n actual:")
    config_actual = sistema.obtener_resumen_configuracion()
    for key, value in config_actual['filtros_basicos'].items():
        print(f"   {key}: {value}")
    
    print("\nüïê CONFIGURANDO FILTROS POR HORA...")
    print("   Estrategia recomendada:")
    print("   ‚Ä¢ Ma√±ana (09:00): Filtros m√°s estrictos para consensos matutinos")
    print("   ‚Ä¢ Antes de partidos: Filtros m√°s permisivos para alertas urgentes")
    
    # Configuraci√≥n sugerida de filtros por hora
    configuracion_propuesta = {
        # Filtros base (por defecto)
        "umbral_minimo": 70,
        "expertos_minimos": 15,
        "picks_minimos": 8,
        "direccion_permitida": ["OVER", "UNDER"],
        "total_line_min": 6.0,
        "total_line_max": 15.0,
        
        # Horarios de scraping
        "horas_scraping": ["09:00", "antes_partido"],
        "minutos_antes_partido": 15,
        
        # Filtros espec√≠ficos por hora
        "filtros_por_hora": {
            "09:00": {  # Scraping matutino - M√ÅS ESTRICTO
                "umbral_minimo": 75,
                "expertos_minimos": 20,
                "picks_minimos": 12
            },
            "12:00": {  # Mediod√≠a - INTERMEDIO
                "umbral_minimo": 72,
                "expertos_minimos": 18,
                "picks_minimos": 10
            },
            "15:00": {  # Tarde - EST√ÅNDAR
                "umbral_minimo": 70,
                "expertos_minimos": 15,
                "picks_minimos": 8
            },
            "18:00": {  # Noche - M√ÅS PERMISIVO (antes de partidos)
                "umbral_minimo": 65,
                "expertos_minimos": 12,
                "picks_minimos": 6
            }
        }
    }
    
    print("\nüìä CONFIGURACI√ìN PROPUESTA:")
    print("   üåÖ 09:00 (Matutino)  - M√ÅS ESTRICTO:  Umbral 75%, 20+ expertos")
    print("   ‚òÄÔ∏è  12:00 (Mediod√≠a) - INTERMEDIO:    Umbral 72%, 18+ expertos")
    print("   üåá 15:00 (Tarde)    - EST√ÅNDAR:      Umbral 70%, 15+ expertos")
    print("   üåÉ 18:00 (Noche)    - M√ÅS PERMISIVO: Umbral 65%, 12+ expertos")
    
    respuesta = input("\n¬øAplicar esta configuraci√≥n? (s/n): ").strip().lower()
    
    if respuesta == 's':
        try:
            # Aplicar configuraci√≥n
            sistema.actualizar_configuracion(**configuracion_propuesta)
            
            print("\n‚úÖ CONFIGURACI√ìN APLICADA EXITOSAMENTE")
            
            # Verificar que se guard√≥ correctamente
            sistema_verificacion = ScraperRobusto()
            config_nueva = sistema_verificacion.obtener_resumen_configuracion()
            
            print("\nüìã Configuraci√≥n guardada:")
            for seccion, datos in config_nueva.items():
                if seccion != 'archivos':
                    print(f"   {seccion}:")
                    for key, value in datos.items():
                        print(f"      ‚Ä¢ {key}: {value}")
            
            # Verificar archivo de configuraci√≥n
            if os.path.exists("config/scraper_config.json"):
                with open("config/scraper_config.json", 'r', encoding='utf-8') as f:
                    config_archivo = json.load(f)
                
                print(f"\nüìÅ Archivo de configuraci√≥n creado:")
                print(f"   üìç config/scraper_config.json")
                print(f"   üìä Filtros por hora: {len(config_archivo.get('filtros_por_hora', {}))}")
                print(f"   üïê √öltima actualizaci√≥n: {config_archivo.get('ultima_actualizacion', 'N/A')}")
            
            print(f"\nüéØ PR√ìXIMOS PASOS:")
            print(f"   1. Ejecutar: python test_sistema_robusto.py")
            print(f"   2. Verificar que los filtros se aplican correctamente")
            print(f"   3. Automatizar con el scheduler")
            
        except Exception as e:
            print(f"\n‚ùå Error aplicando configuraci√≥n: {e}")
            import traceback
            traceback.print_exc()
    else:
        print("\n‚è∏Ô∏è Configuraci√≥n no aplicada")
    
    return sistema

def mostrar_configuracion_actual():
    """Mostrar la configuraci√≥n actual en detalle"""
    print("\nüîç CONFIGURACI√ìN ACTUAL DETALLADA:")
    print("=" * 50)
    
    try:
        if os.path.exists("config/scraper_config.json"):
            with open("config/scraper_config.json", 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            print("üìä Filtros base:")
            filtros_base = ['umbral_minimo', 'expertos_minimos', 'picks_minimos']
            for filtro in filtros_base:
                print(f"   ‚Ä¢ {filtro}: {config.get(filtro, 'N/A')}")
            
            print(f"\nüïê Filtros por hora:")
            filtros_hora = config.get('filtros_por_hora', {})
            if filtros_hora:
                for hora, filtros in filtros_hora.items():
                    print(f"   üìÖ {hora}:")
                    for key, value in filtros.items():
                        print(f"      ‚Ä¢ {key}: {value}")
            else:
                print("   üìù No hay filtros por hora configurados")
            
            print(f"\n‚è∞ Configuraci√≥n de scraping:")
            print(f"   ‚Ä¢ Horas: {config.get('horas_scraping', [])}")
            print(f"   ‚Ä¢ Minutos antes partido: {config.get('minutos_antes_partido', 15)}")
            
        else:
            print("‚ùå No existe archivo de configuraci√≥n")
    except Exception as e:
        print(f"‚ùå Error leyendo configuraci√≥n: {e}")

def menu_principal():
    """Men√∫ principal del configurador"""
    while True:
        print("\n" + "="*50)
        print("üéõÔ∏è  CONFIGURADOR DE FILTROS DIN√ÅMICOS")
        print("="*50)
        print("1. üìä Mostrar configuraci√≥n actual")
        print("2. ‚öôÔ∏è  Aplicar configuraci√≥n sugerida")
        print("3. üß™ Probar sistema robusto")
        print("4. üö™ Salir")
        
        opcion = input("\nSelecciona una opci√≥n (1-4): ").strip()
        
        if opcion == '1':
            mostrar_configuracion_actual()
        elif opcion == '2':
            configurar_filtros_dinamicos()
        elif opcion == '3':
            print("\nüöÄ Iniciando prueba del sistema...")
            os.system('python test_sistema_robusto.py')
        elif opcion == '4':
            print("\nüëã ¬°Hasta luego!")
            break
        else:
            print("\n‚ùå Opci√≥n no v√°lida")

if __name__ == "__main__":
    menu_principal()
